using STRCore.FEMElements;
using STRCore.STRElements;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace STRCore.Helpers
{
    internal static class ModelHelper 
    {
        public static void ClearStrucutralModel()
        {
            STRController.CurrentController.Structure.FEMNodes.Clear();
            STRController.CurrentController.Structure.FEMBars.Clear();
            STRController.CurrentController.Structure.LastFEMNodeId = 0;
            STRController.CurrentController.Structure.LastFEMBarId = 0;
            foreach (STRLine line in STRController.CurrentController.Structure.Lines)
            {
                line.FEMBars.Clear();
            }

            List<STRNode> autoNodes = new List<STRNode>();
            foreach (STRNode node in STRController.CurrentController.Structure.Nodes)
            {
                if (node.IsAutoGenerated)
                    autoNodes.Add(node);
            }

            foreach (STRNode autoNode in autoNodes)
                STRController.CurrentController.Structure.Nodes.Remove(autoNode);
        }
        internal static void GenerateFiniteElements()
        {
            GenerateFEMObjectsFromSTRNodes();
            GenerateFEMObjectsFromSTRLines();
        }
        private static void GenerateFEMObjectsFromSTRLines()
        {

        }
        private static void GenerateFEMObjectsFromSTRNodes()
        {
            STRStructure structure = STRController.CurrentController.Structure;
            for (int i = 0; i < structure.Nodes.Count; i++)
            {
                STRNode node = structure.Nodes[i];
                
                FEMNode femMasterNode = STRController.CurrentController.DefineFEMNode(node.X, node.Y, node.Z);
                node.CorrespondingFEMNode = femMasterNode;
                femMasterNode.IsMasterNode = true;
                femMasterNode.IsSupportNode = false;
                femMasterNode.CorrespondingSTRNode = node;
                femMasterNode.IsSlaveNode = false;
                femMasterNode.MasterFEMNode = null;

                if (node.Support != null)
                {
                    Random gen = new Random();
                    double randomNumber = (double)(gen.Next(0, 1000) / 1000.0) * 5.0 + 2.0;
                    double deltaX = randomNumber * Global.Constants.FEMEpsilon;
                    FEMNode femSlaveNode = STRController.CurrentController.DefineFEMNode(node.X + deltaX, node.Y, node.Z);
                    femSlaveNode.IsMasterNode = false;
                    femSlaveNode.IsSupportNode = true;
                    femSlaveNode.CorrespondingSTRNode = node;
                    femSlaveNode.IsSlaveNode = true;
                    femSlaveNode.SlaveFEMNode = null;

                    femSlaveNode.MasterFEMNode = femMasterNode;
                    femMasterNode.SlaveFEMNode = femSlaveNode;

                    STRSupport support = node.Support;
                    FEMBarSpring femBar = STRController.CurrentController.DefineFEMBarSpring(femMasterNode, femSlaveNode);
                    
                    // use the spring constants
                    femBar.KUx = support.KUx;
                    femBar.KUy = support.KUy;
                    femBar.KUz = support.KUz;
                    femBar.KRx = support.KRx;
                    femBar.KRy = support.KRy;
                    femBar.KRz = support.KRz;
                }
            }
        }
        internal static void PrepareStructuralModel()
        {
            // Find if any lines intersect, and create nodes at the intersection of lines
            CreateSTRNodeFromLineXLine();
        }
        private static void CreateSTRNodeFromLineXLine()
        {
            STRStructure structure = STRController.CurrentController.Structure;

            for (int i = 0; i < structure.Lines.Count; i++)
            {
                STRLine line1 = structure.Lines[i];
                STRNode start1 = line1.Node1;
                STRNode end1 = line1.Node2;
                LineSegment segment1 = new LineSegment(start1.X, start1.Y, start1.Z, end1.X, end1.Y, end1.Z);
                for (int j = 0; j < structure.Lines.Count; j++)
                {
                    STRLine line2 = structure.Lines[j];
                    if (line1.Id == line2.Id) continue;
                    STRNode start2 = line2.Node1;
                    STRNode end2 = line2.Node2;
                    LineSegment segment2 = new LineSegment(start2.X, start2.Y, start2.Z, end2.X, end2.Y, end2.Z);

                    double[] intersectionPoint = LineSegment.LineSegmentXLineSegment(segment1, segment2);
                    if (double.IsNaN(intersectionPoint[0]) ||
                        double.IsNaN(intersectionPoint[1]) ||
                        double.IsNaN(intersectionPoint[2]))
                        continue;
                    STRNode node = STRController.CurrentController.DefineSTRNode(intersectionPoint[0], intersectionPoint[1], intersectionPoint[2]);
                    node.IsAutoGenerated = true;
                }
            }
        }
    }
}
